# Makefile.in generated by automake 1.15 from Makefile.am.
# tests/unit/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#
# This file is part of project GEOS (http://trac.osgeo.org/geos/) 
#


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/geos
pkgincludedir = $(includedir)/geos
pkglibdir = $(libdir)/geos
pkglibexecdir = $(libexecdir)/geos
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin14.5.0
host_triplet = x86_64-apple-darwin14.5.0
target_triplet = x86_64-apple-darwin14.5.0
TESTS = geos_unit$(EXEEXT)
check_PROGRAMS = geos_unit$(EXEEXT)
subdir = tests/unit
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/macros/ac_pkg_swig.m4 \
	$(top_srcdir)/macros/ac_python_devel.m4 \
	$(top_srcdir)/macros/libtool.m4 \
	$(top_srcdir)/macros/ltoptions.m4 \
	$(top_srcdir)/macros/ltsugar.m4 \
	$(top_srcdir)/macros/ltversion.m4 \
	$(top_srcdir)/macros/lt~obsolete.m4 \
	$(top_srcdir)/macros/python.m4 $(top_srcdir)/macros/ruby.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(noinst_HEADERS) \
	$(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/geos/platform.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__dirstamp = $(am__leading_dot)dirstamp
am_geos_unit_OBJECTS = geos_unit.$(OBJEXT) \
	algorithm/AngleTest.$(OBJEXT) \
	algorithm/InteriorPointAreaTest.$(OBJEXT) \
	algorithm/CGAlgorithms/isCCWTest.$(OBJEXT) \
	algorithm/CGAlgorithms/isPointInRingTest.$(OBJEXT) \
	algorithm/CGAlgorithms/computeOrientationTest.$(OBJEXT) \
	algorithm/CGAlgorithms/signedAreaTest.$(OBJEXT) \
	algorithm/ConvexHullTest.$(OBJEXT) \
	algorithm/distance/DiscreteHausdorffDistanceTest.$(OBJEXT) \
	algorithm/PointLocatorTest.$(OBJEXT) \
	algorithm/RobustLineIntersectionTest.$(OBJEXT) \
	algorithm/RobustLineIntersectorTest.$(OBJEXT) \
	geom/CoordinateArraySequenceFactoryTest.$(OBJEXT) \
	geom/CoordinateArraySequenceTest.$(OBJEXT) \
	geom/CoordinateListTest.$(OBJEXT) \
	geom/CoordinateTest.$(OBJEXT) geom/DimensionTest.$(OBJEXT) \
	geom/EnvelopeTest.$(OBJEXT) geom/Geometry/clone.$(OBJEXT) \
	geom/Geometry/coversTest.$(OBJEXT) \
	geom/Geometry/equalsTest.$(OBJEXT) \
	geom/Geometry/isRectangleTest.$(OBJEXT) \
	geom/Geometry/normalize.$(OBJEXT) \
	geom/GeometryFactoryTest.$(OBJEXT) \
	geom/IntersectionMatrixTest.$(OBJEXT) \
	geom/LinearRingTest.$(OBJEXT) geom/LineSegmentTest.$(OBJEXT) \
	geom/LineStringTest.$(OBJEXT) geom/LocationTest.$(OBJEXT) \
	geom/MultiLineStringTest.$(OBJEXT) \
	geom/MultiPointTest.$(OBJEXT) geom/MultiPolygonTest.$(OBJEXT) \
	geom/PointTest.$(OBJEXT) geom/PolygonTest.$(OBJEXT) \
	geom/PrecisionModelTest.$(OBJEXT) \
	geom/prep/PreparedGeometryFactoryTest.$(OBJEXT) \
	geom/TriangleTest.$(OBJEXT) \
	geom/util/GeometryExtracterTest.$(OBJEXT) \
	index/quadtree/DoubleBitsTest.$(OBJEXT) \
	io/ByteOrderValuesTest.$(OBJEXT) io/WKBReaderTest.$(OBJEXT) \
	io/WKBWriterTest.$(OBJEXT) io/WKTReaderTest.$(OBJEXT) \
	io/WKTWriterTest.$(OBJEXT) io/WriterTest.$(OBJEXT) \
	linearref/LengthIndexedLineTest.$(OBJEXT) \
	noding/BasicSegmentStringTest.$(OBJEXT) \
	noding/NodedSegmentStringTest.$(OBJEXT) \
	noding/OrientedCoordinateArray.$(OBJEXT) \
	noding/SegmentNodeTest.$(OBJEXT) \
	noding/SegmentPointComparatorTest.$(OBJEXT) \
	noding/snapround/HotPixelTest.$(OBJEXT) \
	noding/snapround/MCIndexSnapRounderTest.$(OBJEXT) \
	operation/buffer/BufferBuilderTest.$(OBJEXT) \
	operation/buffer/BufferOpTest.$(OBJEXT) \
	operation/buffer/BufferParametersTest.$(OBJEXT) \
	operation/distance/DistanceOpTest.$(OBJEXT) \
	operation/intersection/RectangleIntersectionTest.$(OBJEXT) \
	operation/IsSimpleOpTest.$(OBJEXT) \
	operation/linemerge/LineMergerTest.$(OBJEXT) \
	operation/linemerge/LineSequencerTest.$(OBJEXT) \
	operation/overlay/validate/FuzzyPointLocatorTest.$(OBJEXT) \
	operation/overlay/validate/OffsetPointGeneratorTest.$(OBJEXT) \
	operation/overlay/validate/OverlayResultValidatorTest.$(OBJEXT) \
	operation/overlay/snap/GeometrySnapperTest.$(OBJEXT) \
	operation/overlay/snap/LineStringSnapperTest.$(OBJEXT) \
	operation/polygonize/PolygonizeTest.$(OBJEXT) \
	operation/sharedpaths/SharedPathsOpTest.$(OBJEXT) \
	operation/union/CascadedPolygonUnionTest.$(OBJEXT) \
	operation/union/UnaryUnionOpTest.$(OBJEXT) \
	operation/valid/IsValidTest.$(OBJEXT) \
	operation/valid/ValidClosedRingTest.$(OBJEXT) \
	operation/valid/ValidSelfTouchingRingFormingHoleTest.$(OBJEXT) \
	precision/SimpleGeometryPrecisionReducerTest.$(OBJEXT) \
	precision/GeometryPrecisionReducerTest.$(OBJEXT) \
	simplify/DouglasPeuckerSimplifierTest.$(OBJEXT) \
	simplify/TopologyPreservingSimplifierTest.$(OBJEXT) \
	triangulate/quadedge/QuadEdgeTest.$(OBJEXT) \
	triangulate/quadedge/QuadEdgeSubdivisionTest.$(OBJEXT) \
	triangulate/quadedge/VertexTest.$(OBJEXT) \
	triangulate/DelaunayTest.$(OBJEXT) \
	triangulate/VoronoiTest.$(OBJEXT) \
	util/UniqueCoordinateArrayFilterTest.$(OBJEXT) \
	capi/GEOSClipByRectTest.$(OBJEXT) \
	capi/GEOSCoordSeqTest.$(OBJEXT) \
	capi/GEOSDelaunayTriangulationTest.$(OBJEXT) \
	capi/GEOSVoronoiDiagramTest.$(OBJEXT) \
	capi/GEOSGeomFromWKBTest.$(OBJEXT) \
	capi/GEOSGeomToWKTTest.$(OBJEXT) \
	capi/GEOSGetCentroidTest.$(OBJEXT) \
	capi/GEOSContainsTest.$(OBJEXT) \
	capi/GEOSConvexHullTest.$(OBJEXT) \
	capi/GEOSDistanceTest.$(OBJEXT) \
	capi/GEOSInterruptTest.$(OBJEXT) \
	capi/GEOSIntersectsTest.$(OBJEXT) \
	capi/GEOSIntersectionTest.$(OBJEXT) \
	capi/GEOSNearestPointsTest.$(OBJEXT) \
	capi/GEOSWithinTest.$(OBJEXT) capi/GEOSSimplifyTest.$(OBJEXT) \
	capi/GEOSPreparedGeometryTest.$(OBJEXT) \
	capi/GEOSPointOnSurfaceTest.$(OBJEXT) \
	capi/GEOSPolygonizer_getCutEdgesTest.$(OBJEXT) \
	capi/GEOSBufferTest.$(OBJEXT) \
	capi/GEOSOffsetCurveTest.$(OBJEXT) \
	capi/GEOSGeom_create.$(OBJEXT) \
	capi/GEOSGeom_extractUniquePointsTest.$(OBJEXT) \
	capi/GEOSOrientationIndex.$(OBJEXT) \
	capi/GEOSLineString_PointTest.$(OBJEXT) \
	capi/GEOSNodeTest.$(OBJEXT) capi/GEOSSnapTest.$(OBJEXT) \
	capi/GEOSSharedPathsTest.$(OBJEXT) \
	capi/GEOSRelateBoundaryNodeRuleTest.$(OBJEXT) \
	capi/GEOSRelatePatternMatchTest.$(OBJEXT) \
	capi/GEOSUnaryUnionTest.$(OBJEXT) \
	capi/GEOSisValidDetailTest.$(OBJEXT) \
	capi/GEOSisClosedTest.$(OBJEXT)
geos_unit_OBJECTS = $(am_geos_unit_OBJECTS)
geos_unit_DEPENDENCIES = $(top_builddir)/src/libgeos.la \
	$(top_builddir)/capi/libgeos_c.la
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)/include -I$(top_builddir)/include/geos
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(geos_unit_SOURCES)
DIST_SOURCES = $(geos_unit_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS =  .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/missing aclocal-1.15
ALLOCA = 
AMTAR = $${TAR-tar}
AM_CFLAGS =   -pedantic -Wall -ansi -Wno-long-long 
AM_CXXFLAGS =  -DGEOS_INLINE  -pedantic -Wall -ansi -Wno-long-long 
AM_DEFAULT_VERBOSITY = 1
AR = ar
AS = as
AUTOCONF = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/missing autoconf
AUTOHEADER = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/missing autoheader
AUTOMAKE = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/missing automake-1.15
AWK = awk
CAPI_INTERFACE_AGE = 9
CAPI_INTERFACE_CURRENT = 10
CAPI_INTERFACE_REVISION = 0
CAPI_VERSION = 1.9.0
CAPI_VERSION_MAJOR = 1
CAPI_VERSION_MINOR = 9
CAPI_VERSION_PATCH = 0
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = dlltool
DSYMUTIL = dsymutil
DUMPBIN = 
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GREP = /usr/bin/grep
INLINE_FLAGS = -DGEOS_INLINE
INSTALL = /usr/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTERFACE_AGE = 
INTERFACE_CURRENT = 
INTERFACE_REVISION = 
JTS_PORT = 1.13.0
LD = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAINT = #
MAKEINFO = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/local/bin/gmkdir -p
NM = /usr/bin/nm
NMEDIT = nmedit
OBJDUMP = objdump
OBJEXT = o
OTOOL = otool
OTOOL64 = :
PACKAGE = geos
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PHP = 
PHPUNIT = 
PHP_CONFIG = 
PYTHON = 
PYTHON_CPPFLAGS = 
PYTHON_EXEC_PREFIX = 
PYTHON_EXTRA_LIBS = 
PYTHON_LDFLAGS = 
PYTHON_PLATFORM = 
PYTHON_PREFIX = 
PYTHON_SITE_PKG = 
PYTHON_VERSION = 
RANLIB = ranlib
RUBY = 
RUBY_BIN_DIR = 
RUBY_EXTENSION_DIR = 
RUBY_INCLUDE_DIR = 
RUBY_LIB_DIR = 
RUBY_SHARED_LIB = 
RUBY_SITE_ARCH = 
RUBY_SO_NAME = 
RUBY_VERSION = 
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
SWIG = 
SWIG_LIB = 
SWIG_PYTHON_CPPFLAGS = 
SWIG_PYTHON_OPT = 
VERSION = 3.5.0
VERSION_MAJOR = 3
VERSION_MINOR = 5
VERSION_PATCH = 0
abs_builddir = /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/tests/unit
abs_srcdir = /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/tests/unit
abs_top_builddir = /Users/weitz/Documents/work/spatial/jni/geos-3.5.0
abs_top_srcdir = /Users/weitz/Documents/work/spatial/jni/geos-3.5.0
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin14.5.0
build_alias = 
build_cpu = x86_64
build_os = darwin14.5.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin14.5.0
host_alias = 
host_cpu = x86_64
host_os = darwin14.5.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/weitz/Documents/work/spatial/jni/geos-3.5.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = 
pkgpythondir = 
prefix = /Users/weitz/ndk/build/armeabi
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = 
pythondir = 
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-apple-darwin14.5.0
target_alias = 
target_cpu = x86_64
target_os = darwin14.5.0
target_vendor = apple
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
AUTOMAKE_OPTIONS = subdir-objects
AM_CPPFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/tests/unit/tut -I$(top_builddir)/capi
EXTRA_DIST = \
	tut/tut_assert.hpp \
	tut/tut_exception.hpp \
	tut/tut.hpp \
	tut/tut_posix.hpp \
	tut/tut_console_reporter.hpp \
	tut/tut_reporter.hpp \
	tut/tut_restartable.hpp \
	tut/tut_result.hpp \
	tut/tut_runner.hpp \
	CMakeLists.txt

#bin_PROGRAMS = geos_tut
geos_unit_LDADD = \
	$(top_builddir)/src/libgeos.la  \
	$(top_builddir)/capi/libgeos_c.la  \
	$(NULL)

geos_unit_SOURCES = \
	geos_unit.cpp \
	algorithm/AngleTest.cpp \
	algorithm/InteriorPointAreaTest.cpp \
	algorithm/CGAlgorithms/isCCWTest.cpp \
	algorithm/CGAlgorithms/isPointInRingTest.cpp \
	algorithm/CGAlgorithms/computeOrientationTest.cpp \
	algorithm/CGAlgorithms/signedAreaTest.cpp \
	algorithm/ConvexHullTest.cpp \
	algorithm/distance/DiscreteHausdorffDistanceTest.cpp \
	algorithm/PointLocatorTest.cpp \
	algorithm/RobustLineIntersectionTest.cpp \
	algorithm/RobustLineIntersectorTest.cpp \
	geom/CoordinateArraySequenceFactoryTest.cpp \
	geom/CoordinateArraySequenceTest.cpp \
	geom/CoordinateListTest.cpp \
	geom/CoordinateTest.cpp \
	geom/DimensionTest.cpp \
	geom/EnvelopeTest.cpp \
	geom/Geometry/clone.cpp \
	geom/Geometry/coversTest.cpp \
	geom/Geometry/equalsTest.cpp \
	geom/Geometry/isRectangleTest.cpp \
	geom/Geometry/normalize.cpp \
	geom/GeometryFactoryTest.cpp \
	geom/IntersectionMatrixTest.cpp \
	geom/LinearRingTest.cpp \
	geom/LineSegmentTest.cpp \
	geom/LineStringTest.cpp \
	geom/LocationTest.cpp \
	geom/MultiLineStringTest.cpp \
	geom/MultiPointTest.cpp \
	geom/MultiPolygonTest.cpp \
	geom/PointTest.cpp \
	geom/PolygonTest.cpp \
	geom/PrecisionModelTest.cpp \
	geom/prep/PreparedGeometryFactoryTest.cpp \
	geom/TriangleTest.cpp \
	geom/util/GeometryExtracterTest.cpp \
	index/quadtree/DoubleBitsTest.cpp \
	io/ByteOrderValuesTest.cpp \
	io/WKBReaderTest.cpp \
	io/WKBWriterTest.cpp \
	io/WKTReaderTest.cpp \
	io/WKTWriterTest.cpp \
	io/WriterTest.cpp \
	linearref/LengthIndexedLineTest.cpp \
	noding/BasicSegmentStringTest.cpp \
	noding/NodedSegmentStringTest.cpp \
	noding/OrientedCoordinateArray.cpp \
	noding/SegmentNodeTest.cpp \
	noding/SegmentPointComparatorTest.cpp \
	noding/snapround/HotPixelTest.cpp \
	noding/snapround/MCIndexSnapRounderTest.cpp \
	operation/buffer/BufferBuilderTest.cpp \
	operation/buffer/BufferOpTest.cpp \
	operation/buffer/BufferParametersTest.cpp \
	operation/distance/DistanceOpTest.cpp \
	operation/intersection/RectangleIntersectionTest.cpp \
	operation/IsSimpleOpTest.cpp \
	operation/linemerge/LineMergerTest.cpp \
	operation/linemerge/LineSequencerTest.cpp \
	operation/overlay/validate/FuzzyPointLocatorTest.cpp \
	operation/overlay/validate/OffsetPointGeneratorTest.cpp \
	operation/overlay/validate/OverlayResultValidatorTest.cpp \
	operation/overlay/snap/GeometrySnapperTest.cpp \
	operation/overlay/snap/LineStringSnapperTest.cpp \
	operation/polygonize/PolygonizeTest.cpp \
	operation/sharedpaths/SharedPathsOpTest.cpp \
	operation/union/CascadedPolygonUnionTest.cpp \
	operation/union/UnaryUnionOpTest.cpp \
	operation/valid/IsValidTest.cpp \
	operation/valid/ValidClosedRingTest.cpp \
	operation/valid/ValidSelfTouchingRingFormingHoleTest.cpp \
	precision/SimpleGeometryPrecisionReducerTest.cpp \
	precision/GeometryPrecisionReducerTest.cpp \
	simplify/DouglasPeuckerSimplifierTest.cpp \
	simplify/TopologyPreservingSimplifierTest.cpp \
	triangulate/quadedge/QuadEdgeTest.cpp \
	triangulate/quadedge/QuadEdgeSubdivisionTest.cpp \
	triangulate/quadedge/VertexTest.cpp \
	triangulate/DelaunayTest.cpp \
	triangulate/VoronoiTest.cpp \
	util/UniqueCoordinateArrayFilterTest.cpp \
	capi/GEOSClipByRectTest.cpp \
	capi/GEOSCoordSeqTest.cpp \
	capi/GEOSDelaunayTriangulationTest.cpp \
	capi/GEOSVoronoiDiagramTest.cpp \
	capi/GEOSGeomFromWKBTest.cpp \
	capi/GEOSGeomToWKTTest.cpp \
	capi/GEOSGetCentroidTest.cpp \
	capi/GEOSContainsTest.cpp \
	capi/GEOSConvexHullTest.cpp \
	capi/GEOSDistanceTest.cpp \
	capi/GEOSInterruptTest.cpp \
	capi/GEOSIntersectsTest.cpp \
	capi/GEOSIntersectionTest.cpp \
	capi/GEOSNearestPointsTest.cpp \
	capi/GEOSWithinTest.cpp \
	capi/GEOSSimplifyTest.cpp \
	capi/GEOSPreparedGeometryTest.cpp \
	capi/GEOSPointOnSurfaceTest.cpp \
	capi/GEOSPolygonizer_getCutEdgesTest.cpp \
	capi/GEOSBufferTest.cpp \
	capi/GEOSOffsetCurveTest.cpp \
	capi/GEOSGeom_create.cpp \
	capi/GEOSGeom_extractUniquePointsTest.cpp \
	capi/GEOSOrientationIndex.cpp \
	capi/GEOSLineString_PointTest.cpp \
	capi/GEOSNodeTest.cpp \
	capi/GEOSSnapTest.cpp \
	capi/GEOSSharedPathsTest.cpp \
	capi/GEOSRelateBoundaryNodeRuleTest.cpp \
	capi/GEOSRelatePatternMatchTest.cpp \
	capi/GEOSUnaryUnionTest.cpp \
	capi/GEOSisValidDetailTest.cpp \
	capi/GEOSisClosedTest.cpp

noinst_HEADERS = \
	utility.h

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tests/unit/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tests/unit/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
algorithm/$(am__dirstamp):
	@$(MKDIR_P) algorithm
	@: > algorithm/$(am__dirstamp)
algorithm/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) algorithm/$(DEPDIR)
	@: > algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/AngleTest.$(OBJEXT): algorithm/$(am__dirstamp) \
	algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/InteriorPointAreaTest.$(OBJEXT): algorithm/$(am__dirstamp) \
	algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/CGAlgorithms/$(am__dirstamp):
	@$(MKDIR_P) algorithm/CGAlgorithms
	@: > algorithm/CGAlgorithms/$(am__dirstamp)
algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) algorithm/CGAlgorithms/$(DEPDIR)
	@: > algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
algorithm/CGAlgorithms/isCCWTest.$(OBJEXT):  \
	algorithm/CGAlgorithms/$(am__dirstamp) \
	algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
algorithm/CGAlgorithms/isPointInRingTest.$(OBJEXT):  \
	algorithm/CGAlgorithms/$(am__dirstamp) \
	algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
algorithm/CGAlgorithms/computeOrientationTest.$(OBJEXT):  \
	algorithm/CGAlgorithms/$(am__dirstamp) \
	algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
algorithm/CGAlgorithms/signedAreaTest.$(OBJEXT):  \
	algorithm/CGAlgorithms/$(am__dirstamp) \
	algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
algorithm/ConvexHullTest.$(OBJEXT): algorithm/$(am__dirstamp) \
	algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/distance/$(am__dirstamp):
	@$(MKDIR_P) algorithm/distance
	@: > algorithm/distance/$(am__dirstamp)
algorithm/distance/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) algorithm/distance/$(DEPDIR)
	@: > algorithm/distance/$(DEPDIR)/$(am__dirstamp)
algorithm/distance/DiscreteHausdorffDistanceTest.$(OBJEXT):  \
	algorithm/distance/$(am__dirstamp) \
	algorithm/distance/$(DEPDIR)/$(am__dirstamp)
algorithm/PointLocatorTest.$(OBJEXT): algorithm/$(am__dirstamp) \
	algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/RobustLineIntersectionTest.$(OBJEXT):  \
	algorithm/$(am__dirstamp) algorithm/$(DEPDIR)/$(am__dirstamp)
algorithm/RobustLineIntersectorTest.$(OBJEXT):  \
	algorithm/$(am__dirstamp) algorithm/$(DEPDIR)/$(am__dirstamp)
geom/$(am__dirstamp):
	@$(MKDIR_P) geom
	@: > geom/$(am__dirstamp)
geom/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) geom/$(DEPDIR)
	@: > geom/$(DEPDIR)/$(am__dirstamp)
geom/CoordinateArraySequenceFactoryTest.$(OBJEXT):  \
	geom/$(am__dirstamp) geom/$(DEPDIR)/$(am__dirstamp)
geom/CoordinateArraySequenceTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/CoordinateListTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/CoordinateTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/DimensionTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/EnvelopeTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/$(am__dirstamp):
	@$(MKDIR_P) geom/Geometry
	@: > geom/Geometry/$(am__dirstamp)
geom/Geometry/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) geom/Geometry/$(DEPDIR)
	@: > geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/clone.$(OBJEXT): geom/Geometry/$(am__dirstamp) \
	geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/coversTest.$(OBJEXT): geom/Geometry/$(am__dirstamp) \
	geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/equalsTest.$(OBJEXT): geom/Geometry/$(am__dirstamp) \
	geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/isRectangleTest.$(OBJEXT):  \
	geom/Geometry/$(am__dirstamp) \
	geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/Geometry/normalize.$(OBJEXT): geom/Geometry/$(am__dirstamp) \
	geom/Geometry/$(DEPDIR)/$(am__dirstamp)
geom/GeometryFactoryTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/IntersectionMatrixTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/LinearRingTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/LineSegmentTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/LineStringTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/LocationTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/MultiLineStringTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/MultiPointTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/MultiPolygonTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/PointTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/PolygonTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/PrecisionModelTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/prep/$(am__dirstamp):
	@$(MKDIR_P) geom/prep
	@: > geom/prep/$(am__dirstamp)
geom/prep/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) geom/prep/$(DEPDIR)
	@: > geom/prep/$(DEPDIR)/$(am__dirstamp)
geom/prep/PreparedGeometryFactoryTest.$(OBJEXT):  \
	geom/prep/$(am__dirstamp) geom/prep/$(DEPDIR)/$(am__dirstamp)
geom/TriangleTest.$(OBJEXT): geom/$(am__dirstamp) \
	geom/$(DEPDIR)/$(am__dirstamp)
geom/util/$(am__dirstamp):
	@$(MKDIR_P) geom/util
	@: > geom/util/$(am__dirstamp)
geom/util/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) geom/util/$(DEPDIR)
	@: > geom/util/$(DEPDIR)/$(am__dirstamp)
geom/util/GeometryExtracterTest.$(OBJEXT): geom/util/$(am__dirstamp) \
	geom/util/$(DEPDIR)/$(am__dirstamp)
index/quadtree/$(am__dirstamp):
	@$(MKDIR_P) index/quadtree
	@: > index/quadtree/$(am__dirstamp)
index/quadtree/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) index/quadtree/$(DEPDIR)
	@: > index/quadtree/$(DEPDIR)/$(am__dirstamp)
index/quadtree/DoubleBitsTest.$(OBJEXT):  \
	index/quadtree/$(am__dirstamp) \
	index/quadtree/$(DEPDIR)/$(am__dirstamp)
io/$(am__dirstamp):
	@$(MKDIR_P) io
	@: > io/$(am__dirstamp)
io/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) io/$(DEPDIR)
	@: > io/$(DEPDIR)/$(am__dirstamp)
io/ByteOrderValuesTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
io/WKBReaderTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
io/WKBWriterTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
io/WKTReaderTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
io/WKTWriterTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
io/WriterTest.$(OBJEXT): io/$(am__dirstamp) \
	io/$(DEPDIR)/$(am__dirstamp)
linearref/$(am__dirstamp):
	@$(MKDIR_P) linearref
	@: > linearref/$(am__dirstamp)
linearref/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) linearref/$(DEPDIR)
	@: > linearref/$(DEPDIR)/$(am__dirstamp)
linearref/LengthIndexedLineTest.$(OBJEXT): linearref/$(am__dirstamp) \
	linearref/$(DEPDIR)/$(am__dirstamp)
noding/$(am__dirstamp):
	@$(MKDIR_P) noding
	@: > noding/$(am__dirstamp)
noding/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) noding/$(DEPDIR)
	@: > noding/$(DEPDIR)/$(am__dirstamp)
noding/BasicSegmentStringTest.$(OBJEXT): noding/$(am__dirstamp) \
	noding/$(DEPDIR)/$(am__dirstamp)
noding/NodedSegmentStringTest.$(OBJEXT): noding/$(am__dirstamp) \
	noding/$(DEPDIR)/$(am__dirstamp)
noding/OrientedCoordinateArray.$(OBJEXT): noding/$(am__dirstamp) \
	noding/$(DEPDIR)/$(am__dirstamp)
noding/SegmentNodeTest.$(OBJEXT): noding/$(am__dirstamp) \
	noding/$(DEPDIR)/$(am__dirstamp)
noding/SegmentPointComparatorTest.$(OBJEXT): noding/$(am__dirstamp) \
	noding/$(DEPDIR)/$(am__dirstamp)
noding/snapround/$(am__dirstamp):
	@$(MKDIR_P) noding/snapround
	@: > noding/snapround/$(am__dirstamp)
noding/snapround/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) noding/snapround/$(DEPDIR)
	@: > noding/snapround/$(DEPDIR)/$(am__dirstamp)
noding/snapround/HotPixelTest.$(OBJEXT):  \
	noding/snapround/$(am__dirstamp) \
	noding/snapround/$(DEPDIR)/$(am__dirstamp)
noding/snapround/MCIndexSnapRounderTest.$(OBJEXT):  \
	noding/snapround/$(am__dirstamp) \
	noding/snapround/$(DEPDIR)/$(am__dirstamp)
operation/buffer/$(am__dirstamp):
	@$(MKDIR_P) operation/buffer
	@: > operation/buffer/$(am__dirstamp)
operation/buffer/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/buffer/$(DEPDIR)
	@: > operation/buffer/$(DEPDIR)/$(am__dirstamp)
operation/buffer/BufferBuilderTest.$(OBJEXT):  \
	operation/buffer/$(am__dirstamp) \
	operation/buffer/$(DEPDIR)/$(am__dirstamp)
operation/buffer/BufferOpTest.$(OBJEXT):  \
	operation/buffer/$(am__dirstamp) \
	operation/buffer/$(DEPDIR)/$(am__dirstamp)
operation/buffer/BufferParametersTest.$(OBJEXT):  \
	operation/buffer/$(am__dirstamp) \
	operation/buffer/$(DEPDIR)/$(am__dirstamp)
operation/distance/$(am__dirstamp):
	@$(MKDIR_P) operation/distance
	@: > operation/distance/$(am__dirstamp)
operation/distance/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/distance/$(DEPDIR)
	@: > operation/distance/$(DEPDIR)/$(am__dirstamp)
operation/distance/DistanceOpTest.$(OBJEXT):  \
	operation/distance/$(am__dirstamp) \
	operation/distance/$(DEPDIR)/$(am__dirstamp)
operation/intersection/$(am__dirstamp):
	@$(MKDIR_P) operation/intersection
	@: > operation/intersection/$(am__dirstamp)
operation/intersection/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/intersection/$(DEPDIR)
	@: > operation/intersection/$(DEPDIR)/$(am__dirstamp)
operation/intersection/RectangleIntersectionTest.$(OBJEXT):  \
	operation/intersection/$(am__dirstamp) \
	operation/intersection/$(DEPDIR)/$(am__dirstamp)
operation/$(am__dirstamp):
	@$(MKDIR_P) operation
	@: > operation/$(am__dirstamp)
operation/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/$(DEPDIR)
	@: > operation/$(DEPDIR)/$(am__dirstamp)
operation/IsSimpleOpTest.$(OBJEXT): operation/$(am__dirstamp) \
	operation/$(DEPDIR)/$(am__dirstamp)
operation/linemerge/$(am__dirstamp):
	@$(MKDIR_P) operation/linemerge
	@: > operation/linemerge/$(am__dirstamp)
operation/linemerge/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/linemerge/$(DEPDIR)
	@: > operation/linemerge/$(DEPDIR)/$(am__dirstamp)
operation/linemerge/LineMergerTest.$(OBJEXT):  \
	operation/linemerge/$(am__dirstamp) \
	operation/linemerge/$(DEPDIR)/$(am__dirstamp)
operation/linemerge/LineSequencerTest.$(OBJEXT):  \
	operation/linemerge/$(am__dirstamp) \
	operation/linemerge/$(DEPDIR)/$(am__dirstamp)
operation/overlay/validate/$(am__dirstamp):
	@$(MKDIR_P) operation/overlay/validate
	@: > operation/overlay/validate/$(am__dirstamp)
operation/overlay/validate/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/overlay/validate/$(DEPDIR)
	@: > operation/overlay/validate/$(DEPDIR)/$(am__dirstamp)
operation/overlay/validate/FuzzyPointLocatorTest.$(OBJEXT):  \
	operation/overlay/validate/$(am__dirstamp) \
	operation/overlay/validate/$(DEPDIR)/$(am__dirstamp)
operation/overlay/validate/OffsetPointGeneratorTest.$(OBJEXT):  \
	operation/overlay/validate/$(am__dirstamp) \
	operation/overlay/validate/$(DEPDIR)/$(am__dirstamp)
operation/overlay/validate/OverlayResultValidatorTest.$(OBJEXT):  \
	operation/overlay/validate/$(am__dirstamp) \
	operation/overlay/validate/$(DEPDIR)/$(am__dirstamp)
operation/overlay/snap/$(am__dirstamp):
	@$(MKDIR_P) operation/overlay/snap
	@: > operation/overlay/snap/$(am__dirstamp)
operation/overlay/snap/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/overlay/snap/$(DEPDIR)
	@: > operation/overlay/snap/$(DEPDIR)/$(am__dirstamp)
operation/overlay/snap/GeometrySnapperTest.$(OBJEXT):  \
	operation/overlay/snap/$(am__dirstamp) \
	operation/overlay/snap/$(DEPDIR)/$(am__dirstamp)
operation/overlay/snap/LineStringSnapperTest.$(OBJEXT):  \
	operation/overlay/snap/$(am__dirstamp) \
	operation/overlay/snap/$(DEPDIR)/$(am__dirstamp)
operation/polygonize/$(am__dirstamp):
	@$(MKDIR_P) operation/polygonize
	@: > operation/polygonize/$(am__dirstamp)
operation/polygonize/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/polygonize/$(DEPDIR)
	@: > operation/polygonize/$(DEPDIR)/$(am__dirstamp)
operation/polygonize/PolygonizeTest.$(OBJEXT):  \
	operation/polygonize/$(am__dirstamp) \
	operation/polygonize/$(DEPDIR)/$(am__dirstamp)
operation/sharedpaths/$(am__dirstamp):
	@$(MKDIR_P) operation/sharedpaths
	@: > operation/sharedpaths/$(am__dirstamp)
operation/sharedpaths/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/sharedpaths/$(DEPDIR)
	@: > operation/sharedpaths/$(DEPDIR)/$(am__dirstamp)
operation/sharedpaths/SharedPathsOpTest.$(OBJEXT):  \
	operation/sharedpaths/$(am__dirstamp) \
	operation/sharedpaths/$(DEPDIR)/$(am__dirstamp)
operation/union/$(am__dirstamp):
	@$(MKDIR_P) operation/union
	@: > operation/union/$(am__dirstamp)
operation/union/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/union/$(DEPDIR)
	@: > operation/union/$(DEPDIR)/$(am__dirstamp)
operation/union/CascadedPolygonUnionTest.$(OBJEXT):  \
	operation/union/$(am__dirstamp) \
	operation/union/$(DEPDIR)/$(am__dirstamp)
operation/union/UnaryUnionOpTest.$(OBJEXT):  \
	operation/union/$(am__dirstamp) \
	operation/union/$(DEPDIR)/$(am__dirstamp)
operation/valid/$(am__dirstamp):
	@$(MKDIR_P) operation/valid
	@: > operation/valid/$(am__dirstamp)
operation/valid/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) operation/valid/$(DEPDIR)
	@: > operation/valid/$(DEPDIR)/$(am__dirstamp)
operation/valid/IsValidTest.$(OBJEXT):  \
	operation/valid/$(am__dirstamp) \
	operation/valid/$(DEPDIR)/$(am__dirstamp)
operation/valid/ValidClosedRingTest.$(OBJEXT):  \
	operation/valid/$(am__dirstamp) \
	operation/valid/$(DEPDIR)/$(am__dirstamp)
operation/valid/ValidSelfTouchingRingFormingHoleTest.$(OBJEXT):  \
	operation/valid/$(am__dirstamp) \
	operation/valid/$(DEPDIR)/$(am__dirstamp)
precision/$(am__dirstamp):
	@$(MKDIR_P) precision
	@: > precision/$(am__dirstamp)
precision/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) precision/$(DEPDIR)
	@: > precision/$(DEPDIR)/$(am__dirstamp)
precision/SimpleGeometryPrecisionReducerTest.$(OBJEXT):  \
	precision/$(am__dirstamp) precision/$(DEPDIR)/$(am__dirstamp)
precision/GeometryPrecisionReducerTest.$(OBJEXT):  \
	precision/$(am__dirstamp) precision/$(DEPDIR)/$(am__dirstamp)
simplify/$(am__dirstamp):
	@$(MKDIR_P) simplify
	@: > simplify/$(am__dirstamp)
simplify/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) simplify/$(DEPDIR)
	@: > simplify/$(DEPDIR)/$(am__dirstamp)
simplify/DouglasPeuckerSimplifierTest.$(OBJEXT):  \
	simplify/$(am__dirstamp) simplify/$(DEPDIR)/$(am__dirstamp)
simplify/TopologyPreservingSimplifierTest.$(OBJEXT):  \
	simplify/$(am__dirstamp) simplify/$(DEPDIR)/$(am__dirstamp)
triangulate/quadedge/$(am__dirstamp):
	@$(MKDIR_P) triangulate/quadedge
	@: > triangulate/quadedge/$(am__dirstamp)
triangulate/quadedge/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) triangulate/quadedge/$(DEPDIR)
	@: > triangulate/quadedge/$(DEPDIR)/$(am__dirstamp)
triangulate/quadedge/QuadEdgeTest.$(OBJEXT):  \
	triangulate/quadedge/$(am__dirstamp) \
	triangulate/quadedge/$(DEPDIR)/$(am__dirstamp)
triangulate/quadedge/QuadEdgeSubdivisionTest.$(OBJEXT):  \
	triangulate/quadedge/$(am__dirstamp) \
	triangulate/quadedge/$(DEPDIR)/$(am__dirstamp)
triangulate/quadedge/VertexTest.$(OBJEXT):  \
	triangulate/quadedge/$(am__dirstamp) \
	triangulate/quadedge/$(DEPDIR)/$(am__dirstamp)
triangulate/$(am__dirstamp):
	@$(MKDIR_P) triangulate
	@: > triangulate/$(am__dirstamp)
triangulate/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) triangulate/$(DEPDIR)
	@: > triangulate/$(DEPDIR)/$(am__dirstamp)
triangulate/DelaunayTest.$(OBJEXT): triangulate/$(am__dirstamp) \
	triangulate/$(DEPDIR)/$(am__dirstamp)
triangulate/VoronoiTest.$(OBJEXT): triangulate/$(am__dirstamp) \
	triangulate/$(DEPDIR)/$(am__dirstamp)
util/$(am__dirstamp):
	@$(MKDIR_P) util
	@: > util/$(am__dirstamp)
util/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) util/$(DEPDIR)
	@: > util/$(DEPDIR)/$(am__dirstamp)
util/UniqueCoordinateArrayFilterTest.$(OBJEXT): util/$(am__dirstamp) \
	util/$(DEPDIR)/$(am__dirstamp)
capi/$(am__dirstamp):
	@$(MKDIR_P) capi
	@: > capi/$(am__dirstamp)
capi/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) capi/$(DEPDIR)
	@: > capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSClipByRectTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSCoordSeqTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSDelaunayTriangulationTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSVoronoiDiagramTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSGeomFromWKBTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSGeomToWKTTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSGetCentroidTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSContainsTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSConvexHullTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSDistanceTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSInterruptTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSIntersectsTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSIntersectionTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSNearestPointsTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSWithinTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSSimplifyTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSPreparedGeometryTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSPointOnSurfaceTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSPolygonizer_getCutEdgesTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSBufferTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSOffsetCurveTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSGeom_create.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSGeom_extractUniquePointsTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSOrientationIndex.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSLineString_PointTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSNodeTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSSnapTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSSharedPathsTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSRelateBoundaryNodeRuleTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSRelatePatternMatchTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSUnaryUnionTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSisValidDetailTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)
capi/GEOSisClosedTest.$(OBJEXT): capi/$(am__dirstamp) \
	capi/$(DEPDIR)/$(am__dirstamp)

geos_unit$(EXEEXT): $(geos_unit_OBJECTS) $(geos_unit_DEPENDENCIES) $(EXTRA_geos_unit_DEPENDENCIES) 
	@rm -f geos_unit$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(geos_unit_OBJECTS) $(geos_unit_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f algorithm/*.$(OBJEXT)
	-rm -f algorithm/CGAlgorithms/*.$(OBJEXT)
	-rm -f algorithm/distance/*.$(OBJEXT)
	-rm -f capi/*.$(OBJEXT)
	-rm -f geom/*.$(OBJEXT)
	-rm -f geom/Geometry/*.$(OBJEXT)
	-rm -f geom/prep/*.$(OBJEXT)
	-rm -f geom/util/*.$(OBJEXT)
	-rm -f index/quadtree/*.$(OBJEXT)
	-rm -f io/*.$(OBJEXT)
	-rm -f linearref/*.$(OBJEXT)
	-rm -f noding/*.$(OBJEXT)
	-rm -f noding/snapround/*.$(OBJEXT)
	-rm -f operation/*.$(OBJEXT)
	-rm -f operation/buffer/*.$(OBJEXT)
	-rm -f operation/distance/*.$(OBJEXT)
	-rm -f operation/intersection/*.$(OBJEXT)
	-rm -f operation/linemerge/*.$(OBJEXT)
	-rm -f operation/overlay/snap/*.$(OBJEXT)
	-rm -f operation/overlay/validate/*.$(OBJEXT)
	-rm -f operation/polygonize/*.$(OBJEXT)
	-rm -f operation/sharedpaths/*.$(OBJEXT)
	-rm -f operation/union/*.$(OBJEXT)
	-rm -f operation/valid/*.$(OBJEXT)
	-rm -f precision/*.$(OBJEXT)
	-rm -f simplify/*.$(OBJEXT)
	-rm -f triangulate/*.$(OBJEXT)
	-rm -f triangulate/quadedge/*.$(OBJEXT)
	-rm -f util/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/geos_unit.Po
include algorithm/$(DEPDIR)/AngleTest.Po
include algorithm/$(DEPDIR)/ConvexHullTest.Po
include algorithm/$(DEPDIR)/InteriorPointAreaTest.Po
include algorithm/$(DEPDIR)/PointLocatorTest.Po
include algorithm/$(DEPDIR)/RobustLineIntersectionTest.Po
include algorithm/$(DEPDIR)/RobustLineIntersectorTest.Po
include algorithm/CGAlgorithms/$(DEPDIR)/computeOrientationTest.Po
include algorithm/CGAlgorithms/$(DEPDIR)/isCCWTest.Po
include algorithm/CGAlgorithms/$(DEPDIR)/isPointInRingTest.Po
include algorithm/CGAlgorithms/$(DEPDIR)/signedAreaTest.Po
include algorithm/distance/$(DEPDIR)/DiscreteHausdorffDistanceTest.Po
include capi/$(DEPDIR)/GEOSBufferTest.Po
include capi/$(DEPDIR)/GEOSClipByRectTest.Po
include capi/$(DEPDIR)/GEOSContainsTest.Po
include capi/$(DEPDIR)/GEOSConvexHullTest.Po
include capi/$(DEPDIR)/GEOSCoordSeqTest.Po
include capi/$(DEPDIR)/GEOSDelaunayTriangulationTest.Po
include capi/$(DEPDIR)/GEOSDistanceTest.Po
include capi/$(DEPDIR)/GEOSGeomFromWKBTest.Po
include capi/$(DEPDIR)/GEOSGeomToWKTTest.Po
include capi/$(DEPDIR)/GEOSGeom_create.Po
include capi/$(DEPDIR)/GEOSGeom_extractUniquePointsTest.Po
include capi/$(DEPDIR)/GEOSGetCentroidTest.Po
include capi/$(DEPDIR)/GEOSInterruptTest.Po
include capi/$(DEPDIR)/GEOSIntersectionTest.Po
include capi/$(DEPDIR)/GEOSIntersectsTest.Po
include capi/$(DEPDIR)/GEOSLineString_PointTest.Po
include capi/$(DEPDIR)/GEOSNearestPointsTest.Po
include capi/$(DEPDIR)/GEOSNodeTest.Po
include capi/$(DEPDIR)/GEOSOffsetCurveTest.Po
include capi/$(DEPDIR)/GEOSOrientationIndex.Po
include capi/$(DEPDIR)/GEOSPointOnSurfaceTest.Po
include capi/$(DEPDIR)/GEOSPolygonizer_getCutEdgesTest.Po
include capi/$(DEPDIR)/GEOSPreparedGeometryTest.Po
include capi/$(DEPDIR)/GEOSRelateBoundaryNodeRuleTest.Po
include capi/$(DEPDIR)/GEOSRelatePatternMatchTest.Po
include capi/$(DEPDIR)/GEOSSharedPathsTest.Po
include capi/$(DEPDIR)/GEOSSimplifyTest.Po
include capi/$(DEPDIR)/GEOSSnapTest.Po
include capi/$(DEPDIR)/GEOSUnaryUnionTest.Po
include capi/$(DEPDIR)/GEOSVoronoiDiagramTest.Po
include capi/$(DEPDIR)/GEOSWithinTest.Po
include capi/$(DEPDIR)/GEOSisClosedTest.Po
include capi/$(DEPDIR)/GEOSisValidDetailTest.Po
include geom/$(DEPDIR)/CoordinateArraySequenceFactoryTest.Po
include geom/$(DEPDIR)/CoordinateArraySequenceTest.Po
include geom/$(DEPDIR)/CoordinateListTest.Po
include geom/$(DEPDIR)/CoordinateTest.Po
include geom/$(DEPDIR)/DimensionTest.Po
include geom/$(DEPDIR)/EnvelopeTest.Po
include geom/$(DEPDIR)/GeometryFactoryTest.Po
include geom/$(DEPDIR)/IntersectionMatrixTest.Po
include geom/$(DEPDIR)/LineSegmentTest.Po
include geom/$(DEPDIR)/LineStringTest.Po
include geom/$(DEPDIR)/LinearRingTest.Po
include geom/$(DEPDIR)/LocationTest.Po
include geom/$(DEPDIR)/MultiLineStringTest.Po
include geom/$(DEPDIR)/MultiPointTest.Po
include geom/$(DEPDIR)/MultiPolygonTest.Po
include geom/$(DEPDIR)/PointTest.Po
include geom/$(DEPDIR)/PolygonTest.Po
include geom/$(DEPDIR)/PrecisionModelTest.Po
include geom/$(DEPDIR)/TriangleTest.Po
include geom/Geometry/$(DEPDIR)/clone.Po
include geom/Geometry/$(DEPDIR)/coversTest.Po
include geom/Geometry/$(DEPDIR)/equalsTest.Po
include geom/Geometry/$(DEPDIR)/isRectangleTest.Po
include geom/Geometry/$(DEPDIR)/normalize.Po
include geom/prep/$(DEPDIR)/PreparedGeometryFactoryTest.Po
include geom/util/$(DEPDIR)/GeometryExtracterTest.Po
include index/quadtree/$(DEPDIR)/DoubleBitsTest.Po
include io/$(DEPDIR)/ByteOrderValuesTest.Po
include io/$(DEPDIR)/WKBReaderTest.Po
include io/$(DEPDIR)/WKBWriterTest.Po
include io/$(DEPDIR)/WKTReaderTest.Po
include io/$(DEPDIR)/WKTWriterTest.Po
include io/$(DEPDIR)/WriterTest.Po
include linearref/$(DEPDIR)/LengthIndexedLineTest.Po
include noding/$(DEPDIR)/BasicSegmentStringTest.Po
include noding/$(DEPDIR)/NodedSegmentStringTest.Po
include noding/$(DEPDIR)/OrientedCoordinateArray.Po
include noding/$(DEPDIR)/SegmentNodeTest.Po
include noding/$(DEPDIR)/SegmentPointComparatorTest.Po
include noding/snapround/$(DEPDIR)/HotPixelTest.Po
include noding/snapround/$(DEPDIR)/MCIndexSnapRounderTest.Po
include operation/$(DEPDIR)/IsSimpleOpTest.Po
include operation/buffer/$(DEPDIR)/BufferBuilderTest.Po
include operation/buffer/$(DEPDIR)/BufferOpTest.Po
include operation/buffer/$(DEPDIR)/BufferParametersTest.Po
include operation/distance/$(DEPDIR)/DistanceOpTest.Po
include operation/intersection/$(DEPDIR)/RectangleIntersectionTest.Po
include operation/linemerge/$(DEPDIR)/LineMergerTest.Po
include operation/linemerge/$(DEPDIR)/LineSequencerTest.Po
include operation/overlay/snap/$(DEPDIR)/GeometrySnapperTest.Po
include operation/overlay/snap/$(DEPDIR)/LineStringSnapperTest.Po
include operation/overlay/validate/$(DEPDIR)/FuzzyPointLocatorTest.Po
include operation/overlay/validate/$(DEPDIR)/OffsetPointGeneratorTest.Po
include operation/overlay/validate/$(DEPDIR)/OverlayResultValidatorTest.Po
include operation/polygonize/$(DEPDIR)/PolygonizeTest.Po
include operation/sharedpaths/$(DEPDIR)/SharedPathsOpTest.Po
include operation/union/$(DEPDIR)/CascadedPolygonUnionTest.Po
include operation/union/$(DEPDIR)/UnaryUnionOpTest.Po
include operation/valid/$(DEPDIR)/IsValidTest.Po
include operation/valid/$(DEPDIR)/ValidClosedRingTest.Po
include operation/valid/$(DEPDIR)/ValidSelfTouchingRingFormingHoleTest.Po
include precision/$(DEPDIR)/GeometryPrecisionReducerTest.Po
include precision/$(DEPDIR)/SimpleGeometryPrecisionReducerTest.Po
include simplify/$(DEPDIR)/DouglasPeuckerSimplifierTest.Po
include simplify/$(DEPDIR)/TopologyPreservingSimplifierTest.Po
include triangulate/$(DEPDIR)/DelaunayTest.Po
include triangulate/$(DEPDIR)/VoronoiTest.Po
include triangulate/quadedge/$(DEPDIR)/QuadEdgeSubdivisionTest.Po
include triangulate/quadedge/$(DEPDIR)/QuadEdgeTest.Po
include triangulate/quadedge/$(DEPDIR)/VertexTest.Po
include util/$(DEPDIR)/UniqueCoordinateArrayFilterTest.Po

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
geos_unit.log: geos_unit$(EXEEXT)
	@p='geos_unit$(EXEEXT)'; \
	b='geos_unit'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.test$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f algorithm/$(DEPDIR)/$(am__dirstamp)
	-rm -f algorithm/$(am__dirstamp)
	-rm -f algorithm/CGAlgorithms/$(DEPDIR)/$(am__dirstamp)
	-rm -f algorithm/CGAlgorithms/$(am__dirstamp)
	-rm -f algorithm/distance/$(DEPDIR)/$(am__dirstamp)
	-rm -f algorithm/distance/$(am__dirstamp)
	-rm -f capi/$(DEPDIR)/$(am__dirstamp)
	-rm -f capi/$(am__dirstamp)
	-rm -f geom/$(DEPDIR)/$(am__dirstamp)
	-rm -f geom/$(am__dirstamp)
	-rm -f geom/Geometry/$(DEPDIR)/$(am__dirstamp)
	-rm -f geom/Geometry/$(am__dirstamp)
	-rm -f geom/prep/$(DEPDIR)/$(am__dirstamp)
	-rm -f geom/prep/$(am__dirstamp)
	-rm -f geom/util/$(DEPDIR)/$(am__dirstamp)
	-rm -f geom/util/$(am__dirstamp)
	-rm -f index/quadtree/$(DEPDIR)/$(am__dirstamp)
	-rm -f index/quadtree/$(am__dirstamp)
	-rm -f io/$(DEPDIR)/$(am__dirstamp)
	-rm -f io/$(am__dirstamp)
	-rm -f linearref/$(DEPDIR)/$(am__dirstamp)
	-rm -f linearref/$(am__dirstamp)
	-rm -f noding/$(DEPDIR)/$(am__dirstamp)
	-rm -f noding/$(am__dirstamp)
	-rm -f noding/snapround/$(DEPDIR)/$(am__dirstamp)
	-rm -f noding/snapround/$(am__dirstamp)
	-rm -f operation/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/$(am__dirstamp)
	-rm -f operation/buffer/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/buffer/$(am__dirstamp)
	-rm -f operation/distance/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/distance/$(am__dirstamp)
	-rm -f operation/intersection/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/intersection/$(am__dirstamp)
	-rm -f operation/linemerge/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/linemerge/$(am__dirstamp)
	-rm -f operation/overlay/snap/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/overlay/snap/$(am__dirstamp)
	-rm -f operation/overlay/validate/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/overlay/validate/$(am__dirstamp)
	-rm -f operation/polygonize/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/polygonize/$(am__dirstamp)
	-rm -f operation/sharedpaths/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/sharedpaths/$(am__dirstamp)
	-rm -f operation/union/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/union/$(am__dirstamp)
	-rm -f operation/valid/$(DEPDIR)/$(am__dirstamp)
	-rm -f operation/valid/$(am__dirstamp)
	-rm -f precision/$(DEPDIR)/$(am__dirstamp)
	-rm -f precision/$(am__dirstamp)
	-rm -f simplify/$(DEPDIR)/$(am__dirstamp)
	-rm -f simplify/$(am__dirstamp)
	-rm -f triangulate/$(DEPDIR)/$(am__dirstamp)
	-rm -f triangulate/$(am__dirstamp)
	-rm -f triangulate/quadedge/$(DEPDIR)/$(am__dirstamp)
	-rm -f triangulate/quadedge/$(am__dirstamp)
	-rm -f util/$(DEPDIR)/$(am__dirstamp)
	-rm -f util/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR) algorithm/$(DEPDIR) algorithm/CGAlgorithms/$(DEPDIR) algorithm/distance/$(DEPDIR) capi/$(DEPDIR) geom/$(DEPDIR) geom/Geometry/$(DEPDIR) geom/prep/$(DEPDIR) geom/util/$(DEPDIR) index/quadtree/$(DEPDIR) io/$(DEPDIR) linearref/$(DEPDIR) noding/$(DEPDIR) noding/snapround/$(DEPDIR) operation/$(DEPDIR) operation/buffer/$(DEPDIR) operation/distance/$(DEPDIR) operation/intersection/$(DEPDIR) operation/linemerge/$(DEPDIR) operation/overlay/snap/$(DEPDIR) operation/overlay/validate/$(DEPDIR) operation/polygonize/$(DEPDIR) operation/sharedpaths/$(DEPDIR) operation/union/$(DEPDIR) operation/valid/$(DEPDIR) precision/$(DEPDIR) simplify/$(DEPDIR) triangulate/$(DEPDIR) triangulate/quadedge/$(DEPDIR) util/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR) algorithm/$(DEPDIR) algorithm/CGAlgorithms/$(DEPDIR) algorithm/distance/$(DEPDIR) capi/$(DEPDIR) geom/$(DEPDIR) geom/Geometry/$(DEPDIR) geom/prep/$(DEPDIR) geom/util/$(DEPDIR) index/quadtree/$(DEPDIR) io/$(DEPDIR) linearref/$(DEPDIR) noding/$(DEPDIR) noding/snapround/$(DEPDIR) operation/$(DEPDIR) operation/buffer/$(DEPDIR) operation/distance/$(DEPDIR) operation/intersection/$(DEPDIR) operation/linemerge/$(DEPDIR) operation/overlay/snap/$(DEPDIR) operation/overlay/validate/$(DEPDIR) operation/polygonize/$(DEPDIR) operation/sharedpaths/$(DEPDIR) operation/union/$(DEPDIR) operation/valid/$(DEPDIR) precision/$(DEPDIR) simplify/$(DEPDIR) triangulate/$(DEPDIR) triangulate/quadedge/$(DEPDIR) util/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
